###
# MediHelp Plus API Test File
#
# This file contains requests for all API endpoints.
# Use with a REST client extension (e.g., REST Client for VS Code).
#
# INSTRUCTIONS:
# 1. Register a patient and a doctor.
# 2. Log in as the patient to get tokens. The script will auto-save them.
# 3. Use the patient's token for patient-specific actions.
# 4. Log in as the doctor to get their tokens for doctor-specific actions.
# 5. Log in as a superuser/admin for admin actions.
#
###

# --------------------------------------------------------------------------
# Variables - Set your base URL and placeholder IDs here
# --------------------------------------------------------------------------

@base_url = http://127.0.0.1:8000/api
@patient_email = patient-test-1@example.com
@patient_password = StrongPassword123!
@doctor_email = doctor-test-1@example.com
@doctor_password = StrongPassword123!
@admin_email = admin@example.com
@admin_password = StrongPassword123!

# These tokens will be set automatically after successful login requests
@access_token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUyOTQ4ODc1LCJpYXQiOjE3NTI5NDg1NzUsImp0aSI6IjQ4OWJhMGIwZjk4NDRkOTc4ZTc4ZTdhYWYyMjQ0MjhkIiwidXNlcl9pZCI6MTB9.04aBEtjIyY_mjaPYNm1_H9ooEmq6uhZBRWU0muPufIQ
@refresh_token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUyOTQ4OTM3LCJpYXQiOjE3NTI5NDg1NzUsImp0aSI6ImQ2ZTYyZTRlZGE3NjRmMzc4MWFlMDAxN2FiZjA2NmU4IiwidXNlcl9pZCI6MTB9.jwVs25vLbDSNHgBjNqYKRG9F0xk8chBwTSD9riIIgkA

# Manually set these IDs after creating resources
@doctor_user_id = 2
@appointment_id = 1


# --------------------------------------------------------------------------
# [SECTION 1] AUTH & TOKENS
# --------------------------------------------------------------------------

### (1.1) Obtain JWT access/refresh tokens (Log In)
# @name login
POST {{base_url}}/auth/token/
Content-Type: application/json

{
  "email": "{{patient_email}}",
  "password": "{{patient_password}}"
}

# ==> This script automatically captures the tokens from the response
# for use in subsequent requests.
# {%
#   client.test("Request executed successfully", function() {
#     client.assert(response.status === 200, "Response status is not 200");
#   });
#   const data = response.body;
#   client.global.set("access_token", data.access);
#   client.global.set("refresh_token", data.refresh);
# %}


### (1.2) Refresh access token
POST {{base_url}}/auth/token/refresh/
Content-Type: application/json

{
  "refresh": "{{refresh_token}}"
}

# > {%
#   const data = response.body;
#   client.global.set("access_token", data.access);
# %}


### (1.3) Blacklist/logout refresh token
POST {{base_url}}/auth/token/blacklist/
Content-Type: application/json

{
  "refresh": "{{refresh_token}}"
}


# --------------------------------------------------------------------------
# [SECTION 2] USER REGISTRATION
# --------------------------------------------------------------------------

### (2.1) Register a new Patient
# @name registerPatient
POST {{base_url}}/auth/register/patient/
Content-Type: application/json

{
  "email": "{{patient_email}}",
  "first_name": "John",
  "last_name": "Smith",
  "phone": "+15551112233",
  "gender": "male",
  "date_of_birth": "1990-01-15",
  "address": "123 Health St, Wellness City",
  "password": "{{patient_password}}",
  "password2": "{{patient_password}}"
}


### (2.2) Register a new Doctor
# @name registerDoctor
POST {{base_url}}/auth/register/doctor/
Content-Type: application/json

{
  "email": "{{doctor_email}}",
  "first_name": "Emily",
  "last_name": "Carter",
  "phone": "+15558889900",
  "password": "{{doctor_password}}",
  "password2": "{{doctor_password}}",
  "license_number": "MD-UNIQUE-789012",
  "specialization": "Cardiology",
  "description": "Board-certified cardiologist with 10 years of experience.",
  "consultation_fee": 150.00,
  "availability": {
    "monday": ["09:00", "14:00"],
    "wednesday": ["10:00-16:00"],
    "friday": ["09:00-12:00"]
  }
}


# --------------------------------------------------------------------------
# [SECTION 3] USER & PROFILE MANAGEMENT (Logged In)
# --------------------------------------------------------------------------

### (3.1) Get current user's details
# (Works for any authenticated user)
GET {{base_url}}/auth/me/
Authorization: Bearer {{access_token}}


### (3.2) Get patient's own profile
# (Requires login as a PATIENT)
GET {{base_url}}/auth/me/patient-profile/
Authorization: Bearer {{access_token}}


### (3.3) Update patient's own profile
# (Requires login as a PATIENT)
PATCH {{base_url}}/auth/me/patient-profile/
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "blood_type": "O+",
  "allergies": "Pollen",
  "height": 180,
  "weight": 75
}


### (3.4) Get doctor's own profile
# (Requires login as a DOCTOR)
GET {{base_url}}/auth/me/doctor-profile/
Authorization: Bearer {{access_token}}


### (3.5) Update doctor's own profile
# (Requires login as a DOCTOR)
PATCH {{base_url}}/auth/me/doctor-profile/
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "consultation_fee": 175.00,
  "description": "Updated description: Board-certified cardiologist with 10 years of experience in invasive cardiology."
}


# --------------------------------------------------------------------------
# [SECTION 4] DOCTOR LISTING (Public, requires auth)
# --------------------------------------------------------------------------

### (4.1) List all VERIFIED doctors
# (Requires any authenticated user)
# Supports filtering: ?search=carter&specialization=Cardiology&ordering=-consultation_fee
GET {{base_url}}/auth/doctors/
Authorization: Bearer {{access_token}}


### (4.2) Get details for a specific VERIFIED doctor
# (Requires any authenticated user)
GET {{base_url}}/auth/doctors/{{doctor_user_id}}/
Authorization: Bearer {{access_token}}


# --------------------------------------------------------------------------
# [SECTION 5] APPOINTMENTS (Patient/Doctor/Admin)
# --------------------------------------------------------------------------

### (5.1) Create a new appointment
# (Requires login as a PATIENT)
# NOTE: The `doctor` ID must be the USER ID of an APPROVED doctor.
# NOTE: `scheduled_time` must be in the future.
POST {{base_url}}/appointments/
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "doctor": {{doctor_user_id}},
  "scheduled_time": "2025-09-15T14:00:00Z",
  "duration": 30,
  "reason": "Annual check-up and consultation."
}


### (5.2) List upcoming appointments
# (For Patients/Doctors, shows their own. For Admins, shows all.)
GET {{base_url}}/appointments/upcoming/
Authorization: Bearer {{access_token}}


### (5.3) Cancel an appointment
# (Can be done by the patient, the doctor, or an admin)
PATCH {{base_url}}/appointments/{{appointment_id}}/cancel/
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "reason": "Rescheduling needed due to a conflict."
}


# --------------------------------------------------------------------------
# [SECTION 6] SESSION RECORDS (Doctor-specific)
# --------------------------------------------------------------------------

### (6.1) Create a session record for an appointment
# (Requires login as the DOCTOR assigned to the appointment)
# This can only be done once per appointment.
POST {{base_url}}/appointments/{{appointment_id}}/session/
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "notes": "Patient presented with mild symptoms. Vitals are stable. No immediate concerns.",
  "prescription": "Ibuprofen 200mg as needed for pain. Follow up in 2 weeks if symptoms persist.",
  "end_time": "2025-09-15T14:28:00Z"
}


# --------------------------------------------------------------------------
# [SECTION 7] ADMIN ENDPOINTS
# --------------------------------------------------------------------------

### (7.1) Verify or Reject a doctor's profile
# (Requires login as an ADMIN/SUPERUSER)
# Use a doctor's USER ID in the URL.
PATCH {{base_url}}/auth/admin/verify-doctor/{{doctor_user_id}}/
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "verification_status": "approved"
}

### To REJECT a doctor, use this body instead:
# {
#   "verification_status": "rejected"
# }


# --------------------------------------------------------------------------
# [SECTION 8] API DOCUMENTATION (Schema)
# --------------------------------------------------------------------------

### (8.1) Get OpenAPI schema
GET {{base_url}}/schema/


### (8.2) Swagger UI documentation (Open link in browser)
GET {{base_url}}/schema/swagger-ui/


### (8.3) Redoc documentation (Open link in browser)
GET {{base_url}}/schema/redoc/